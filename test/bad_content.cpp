#include "main.hpp"
#include "utils.hpp"
#include "json_parser.hpp"

using namespace icy;

using bad_content = json::bad_content;
using exception = json::exception;

int main(void) {
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{"),
        exception::RIGHT_CURLY_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{\"first\":1st"),
        exception::RIGHT_CURLY_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("["),
        exception::RIGHT_SQUARE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("[1st"),
        exception::RIGHT_SQUARE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("[{},"),
        exception::RIGHT_SQUARE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{\"\"}"),
        exception::COLON_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{one:1}"),
        exception::STRING_KEY_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{:1}"),
        exception::STRING_KEY_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("[,]"),
        exception::VALUE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("]"),
        exception::VALUE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load(","),
        exception::VALUE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("truth"),
        exception::VALUE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{\"first\":}"),
        exception::VALUE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{\"\":[}]"),
        exception::VALUE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{\"\":[{},}]"),
        exception::VALUE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("\"1nchy"),
        exception::END_OF_STRING_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("\"1n\nchy\""),
        exception::END_OF_STRING_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("1."),
        exception::END_OF_NUMBER_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("-"),
        exception::END_OF_NUMBER_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("[1,2,]"),
        exception::TRAILING_COMMA
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("{\"one\":1,}"),
        exception::TRAILING_COMMA
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("1nchy"),
        exception::END_OF_FILE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("truefalse"),
        exception::END_OF_FILE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("[1,2,3],"),
        exception::END_OF_FILE_EXPECTED
    );
    EXPECT_THROW_MSG(
        bad_content,
        json::load("[1,2,3][]"),
        exception::END_OF_FILE_EXPECTED
    );
    return 0;
}